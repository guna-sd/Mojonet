from torch import Tensor
import torch

# def test_relu():
#     x = Tensor([[0.1315377950668335, 0.458650141954422],[1.21895918250083923, 0.67886471748352051]])
#     x.requires_grad = True
#     y = torch.nn.GELU().forward(x)
#     print(y.backward(x))

#     print(y[0][0].item())
#     print(y[0][1].item())
#     print(y[1][0].item())
#     print(y[1][1].item())
#     print(x==y)
# test_relu()
# 0.07265163213014603
# 0.3103947937488556
# 1.0831307172775269
# 0.5100910067558289

# class Module:

#     def zero_grad(self):
#         for p in self.parameters():
#             p.grad = 0

#     def parameters(self):
#         return []

inputs = Tensor([[[-0.365234375, 2.046875, 0.099609375, 0.1005859375, 1.390625],
[6.375, 3.0625, -0.3828125, -2.0625, -2.8125],
[-2.3125, -6.03125, -2.6875, -0.5546875, -0.2216796875],
[1.1328125, 4.21875, -1.0078125, 3.640625, -0.85546875]],
[[-3.9375, -1.4140625, 5.03125, -1.21875, -1.8203125],
[-2.96875, 3.3125, -2.921875, 0.4765625, 4.25],
[1.703125, 1.546875, 3.34375, -4.3125, 2.828125],
[-1.25, -0.404296875, 2.234375, 0.287109375, 0.056640625]],
[[-0.47265625, 3.3125, 0.3984375, 0.380859375, 2.96875],
[2.796875, -2.21875, 6.0, 2.328125, 4.03125],
[-1.484375, -1.7421875, 2.75, -3.71875, 1.65625],
[-2.78125, -2.109375, -1.1484375, -1.0703125, -1.3515625]],
[[3.59375, 2.09375, -4.96875, 0.2109375, 4.96875],
[0.47265625, -5.59375, 7.40625, -5.84375, -6.40625],
[-0.46484375, 3.515625, 6.125, -3.21875, 0.9296875],
[-0.462890625, 4.71875, 3.171875, 0.7421875, 0.024658203125]]])



m = Tensor([[-0.244140625, 1.3671875, 0.06640625, 0.0673828125],
[0.92578125, 4.25, 2.046875, -0.255859375],
[-1.375, -1.875, -1.546875, -4.03125],
[-1.7890625, -0.369140625, -0.1474609375, 0.75390625]])

tensor1 = Tensor([[[-0.365234375, 2.046875, 0.099609375, 0.1005859375],
[1.390625, 6.375, 3.0625, -0.3828125],
[-2.0625, -2.8125, -2.3125, -6.03125],
[-2.6875, -0.5546875, -0.2216796875, 1.1328125],
[4.21875, -1.0078125, 3.640625, -0.85546875]],
[[-3.9375, -1.4140625, 5.03125, -1.21875],
[-1.8203125, -2.96875, 3.3125, -2.921875],
[0.4765625, 4.25, 1.703125, 1.546875],
[3.34375, -4.3125, 2.828125, -1.25],
[-0.404296875, 2.234375, 0.287109375, 0.056640625]],
[[-0.47265625, 3.3125, 0.3984375, 0.380859375],
[2.96875, 2.796875, -2.21875, 6.0],
[2.328125, 4.03125, -1.484375, -1.7421875],
[2.75, -3.71875, 1.65625, -2.78125],
[-2.109375, -1.1484375, -1.0703125, -1.3515625]],
[[3.59375, 2.09375, -4.96875, 0.2109375],
[4.96875, 0.47265625, -5.59375, 7.40625],
[-5.84375, -6.40625, -0.46484375, 3.515625],
[6.125, -3.21875, 0.9296875, -0.462890625],
[4.71875, 3.171875, 0.7421875, 0.024658203125]]]).type(torch.bfloat16)


tensor2 = Tensor([[[-4.40625, 4.34375, -2.484375, -1.9453125, -1.484375],
[6.75, 0.76171875, -5.40625, -0.032470703125, 0.76953125],
[-0.5546875, -2.84375, -1.484375, 0.734375, 5.9375],
[0.69921875, -0.79296875, 2.6875, -2.265625, 2.265625]],
[[-0.357421875, 1.9453125, -3.921875, -0.93359375, 1.2109375],
[-0.44921875, -0.302734375, -2.234375, -2.15625, -0.8125],
[2.40625, 2.390625, -0.546875, -4.71875, -5.03125],
[0.43359375, 1.25, -2.296875, -3.125, -4.90625]],
[[3.796875, 3.359375, -4.5625, 0.77734375, -2.15625],
[-0.53515625, 0.2490234375, 1.2890625, 1.28125, 1.7734375],
[0.890625, -2.125, 3.59375, -1.640625, -1.1328125],
[-1.1484375, -0.36328125, -0.373046875, 1.0625, -3.734375]],
[[3.15625, 1.7265625, 2.359375, 0.33984375, 0.07177734375],
[6.4375, -0.228515625, -0.384765625, -3.046875, 0.7421875],
[1.5703125, 0.94921875, 1.6015625, 1.1171875, 3.65625],
[2.375, 4.21875, -0.6484375, -3.609375, -1.5234375]]]).type(torch.bfloat16)


out = Tensor([[[15.4375, -0.38671875, -10.0, 0.4921875, 2.953125],
[35.0, 2.484375, -43.5, 0.2109375, 20.125],
[-12.875, 0.28125, 7.5, 16.125, -26.5],
[9.0, -12.375, 13.0625, 2.53125, 4.8125],
[-28.125, 7.9375, -12.8125, -3.5, 12.6875]],
[[13.6875, 3.25, 18.625, -13.1875, -23.0],
[8.6875, 1.59375, 18.625, 1.625, -2.0625],
[2.6875, 5.625, -15.875, -22.625, -19.0],
[7.03125, 13.0, -2.1875, -3.28125, -0.5625],
[-0.1396484375, -0.703125, -3.6875, -5.96875, -4.03125]],
[[-3.640625, -1.75, 7.71875, 3.625, 5.0],
[0.90625, 13.1875, -20.125, 15.875, -21.25],
[7.34375, 12.625, -10.125, 7.53125, 10.3125],
[17.125, 5.8125, -10.375, -8.25, -4.0],
[-6.75, -4.59375, 4.78125, -2.78125, 8.8125]],
[[17.5, 1.921875, -0.41796875, -11.5, -16.625],
[27.5, 34.5, -2.1875, -32.75, -31.0],
[-52.0, 5.75, -14.375, 4.3125, -12.25],
[-1.015625, 10.25, 17.375, 14.625, 2.15625],
[36.5, 8.25, 11.0625, -7.34375, 5.40625]]]).type(torch.bfloat16)

temp1 = Tensor([[0, 1, 0, 0, 0],
[4, 2, 0, 255, 255],
[255, 252, 255, 0, 0],
[0, 2, 0, 2, 0]]).type(torch.uint8)

temp2 = Tensor([[254, 0, 3, 0],
[255, 255, 2, 255],
[0, 2, 1, 1],
[2, 254, 1, 0],
[0, 1, 0, 0]]).type(torch.uint8)

tempo = Tensor([[255, 255, 2, 255],
[244, 255, 15, 254],
[6, 2, 244, 3],
[2, 250, 6, 254]]).type(torch.uint8)

test1 = torch.Tensor([[1, 1, 1, 1]]).type(torch.int16)
test2 = torch.Tensor([[0, 1, 0, 0],
[0, 4, 2, 0],
[-1, -1, -1, -4],
[-1, 0, 0, 0]]).type(torch.int16)

a = test1 * test2
print(torch.rand(1).type(torch.float16))